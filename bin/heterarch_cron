#!/usr/bin/perl -w
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use Data::Utilities;

use Getopt::Long;

use Neurospaces::Documentation;

use YAML;


$0 =~ m(.*/(.*));

my $program_name = $1;

$program_name =~ m((.*)[_-](.*));

my $documentation_set_name = $1;
my $root_operation_name = $2;

my $home_page_document = "${documentation_set_name}-homepage";

my $output_filename = "${documentation_set_name}_cron.out";
my $descriptor_check = "";
my $build_directory = "$ENV{HOME}/neurospaces_project/${documentation_set_name}/source/snapshots/0";


$SIG{__DIE__}
    = sub {

	Neurospaces::Documentation::Publications::publish_production_results($documentation_set_name);

	use Carp;

	confess @_;
    };


$SIG{INT}
    = sub {
	use Carp;

	confess @_;

	exit 1;
    };


my $option_html_output_directory = "$ENV{HOME}/public_html";
my $option_output_directory = "/tmp";
my $option_verbose = 0;


my $configuration;


sub copy_html_data
{
    my $package_name = shift;

    # define the build directory

    my $html_build_directory = "$ENV{HOME}/neurospaces_project/${package_name}/source/snapshots/0/html/htdocs/neurospaces_project/${package_name}/";

    # first make sure the website is protected at all time by protecting the build directory with access restriction files

    if ($configuration->{HTACCESS})
    {
# 	copy_htacces_file();

	my $target_htaccess_file = $html_build_directory . "/${package_name}/.htaccess";

	if (-e $configuration->{HTACCESS})
	{
	    system "cp $configuration->{HTACCESS} $target_htaccess_file";
	}
    }

    # start defining the website location

    my $html_data_directory = $option_html_output_directory . "/" . "${package_name}_data";

    # clean the old website temporary location

    try_to("rm -rf $html_data_directory");

#     my $contents_directory = $option_html_output_directory . "/${package_name}_data";

#     try_to("mkdir --parents $html_data_directory");

    # copy the new website to its temporary location

    if (-d $html_build_directory)
    {
	try_to("cp -af $html_build_directory $html_data_directory");

	# single shot replace the old website with the new one

	# \todo does this work correctly as a single shot?  It should just do a single ln -sf

	my $html_symlink = $option_html_output_directory . "/" . "${package_name}";

	# \todo this makes the website unavailable for a split second?

	try_to("rm -f $html_symlink");

	# \todo and this leaves the new website at its temporary location?  Meaning on the next removal it will be gone for a couple of seconds?

	try_to("ln -s $html_data_directory $html_symlink");
    }
}


sub parse_config_file
{
    my $config_file = shift;

    if (!-e $config_file)
    {
	print "\n$config_file is an invalid filename\n";

	return;
    }

    print "\nParsing configuration in $config_file\n\n";

    $configuration = YAML::LoadFile($config_file);

    if (!defined $configuration)
    {
	print "This YAML file is invalid\n";

	return;
    }

    if (!$configuration->{packages})
    {
	$configuration->{packages} = {};
    }

    # define the packages that require special attention

    my $packages
	= {
	   # heterarch is forced to upgrade the developer package and heterarch

	   'heterarch' => {
			   upgrade => ($documentation_set_name eq 'heterarch' ? 'heterarch' : ''),
			  },
	   developer => {
			 upgrade => ($documentation_set_name eq 'heterarch' ? 'heterarch' : ''),
			},

	   # and a documentation_set is supposed to upgrade its own contents

	   $documentation_set_name => {
				       upgrade => 'builtin default action',
				      },
	  };

    # and the configuration can add other documentation_sets for upgrade

    my $merged_packages = Data::Merger::merger($configuration->{packages}, $packages);

    # process special options

    if (defined $configuration->{MAILTO})
    {
	chomp($configuration->{MAILTO});

	print "\tSend to email: $configuration->{MAILTO}\n";
    }

    if (defined $configuration->{MAILFROM})
    {
	chomp($configuration->{MAILFROM});

	print "\tSend from email: $configuration->{MAILFROM}\n";
    }

    if (defined $configuration->{HTMLDIR})
    {
	$option_html_output_directory = $configuration->{HTMLDIR};

	chomp($configuration->{HTMLDIR});

	print "\tThe directory for html output is: $configuration->{HTMLDIR}\n";
    }

    if (defined $configuration->{OUTPUTDIR})
    {
	#! note that this overrides an option from set by the command line

	$option_output_directory = $configuration->{OUTPUTDIR};

	chomp($option_output_directory);

	print "\tOutput directory is $option_output_directory\n";
    }

    if (defined $configuration->{URL})
    {
	chomp($configuration->{URL});

	print "\tThe link for accessing the content is $configuration->{URL}\n";
    }

    if (defined $configuration->{LOGROTATE})
    {
	chomp($configuration->{LOGROTATE});

	print "\tNumber of logs to rotate $configuration->{LOGROTATE}\n";
    }

    if (defined $configuration->{LOGDIR})
    {
	chomp($configuration->{LOGDIR});

	print "\tDirectory to store past logs is $configuration->{LOGDIR}\n";
    }

    if (defined $configuration->{DOCUMENTROOT})
    {
	chomp($configuration->{DOCUMENTROOT});

	$build_directory = $configuration->{DOCUMENTROOT};

	print "\tThe root directory for all documents is $build_directory\n";
    }

    if (defined $configuration->{HTACCESS})
    {
	chomp($configuration->{HTACCESS});

	print "\tThe htaccess file to use is $configuration->{HTACCESS}\n";
    }

    print "Done Parsing $config_file:\n";
}


sub contents_page_generate
{
    my $package_name = shift;

    my $contents_directory = $option_html_output_directory . "/${package_name}";

    my $contents_file = "${contents_directory}/contents.html";

#     my $contents_file = $option_html_output_directory . "/html/contents.html";

    open(CONTENTS, ">$contents_file") or die "cannot open file $contents_file for writing: $!";

    my $html_starter = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">
<html>
<head>
  <meta
 content=\"text/html; charset=ISO-8859-1\"
 http-equiv=\"content-type\">
  <title>Neurospaces Content Management System</title>
</head>
<body>
For the home page please click <a
 href=\"${home_page_document}/${home_page_document}.html\">here.</a>
<br>
For the webcheck directory please click <a
 href=\"webcheck/\">here.</a>
<br>
For the statistics output please click <a
 href=\"../../awstats/awstats.pl\">here.</a>
<br>
<br>
This is a listing of all published documents in the ${package_name} documentation. <br>
<br>
<br>
<ul>
";

    print CONTENTS $html_starter;

    #t this needs to be replaced with the same loop as in the main build script.
    #t likely saying that contents generation should be part of the main build script.

    my $documentlist = `${package_name}-tagfilter published`;

    my $published_documents = YAML::Load($documentlist);

    foreach my $published_document (sort @$published_documents)
    {
	my $document
	    = Neurospaces::Documentation::Document->new
		(
		 {
		  directory_name => $published_document,
		 },
		);

	# all documents are converted to html

	my $suffix = ".html";

	# except pdf documents

	if ($document->is_pdf())
	{
	    # they keep their original format

	    $suffix = ".pdf";
	}

	$document->read_descriptor();

	print CONTENTS "<li><a href=\"";

	print CONTENTS $published_document . "/" . $document->{name} . $suffix;

	print CONTENTS "\">";

	print CONTENTS $document->{descriptor}->{'document name'};

	print CONTENTS "</a></li>\n";
    }

    print CONTENTS "</ul>\n</body>\n</html>\n";

    close CONTENTS;

    print "Constructed the contents page\n";
}


sub copy_htacces_file
{
    my $html_build_directory = "$ENV{HOME}/neurospaces_project/${documentation_set_name}/source/snapshots/0/html/htdocs/neurospaces_project/${documentation_set_name}/";

    my $target_htaccess_file = $html_build_directory . "/${documentation_set_name}/.htaccess";

    if (-e $configuration->{HTACCESS})
    {
	system "cp $configuration->{HTACCESS} $target_htaccess_file";
    }
}


sub index_page_generate
{
    my $package_name = shift;

    my $index_file = $option_html_output_directory . "/${package_name}/index.html";

    my $html_document = $index_file;

    open(OUTPUT,">$html_document");

    print OUTPUT "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <title>";

    print OUTPUT $html_document . " (http redirect)";

    print OUTPUT "</title>\n  </head>\n  <body><meta http-equiv=\"refresh\" content=\"0;URL=";

    my $redirect_url = "$home_page_document/$home_page_document.html";

    print OUTPUT $redirect_url;

    print OUTPUT "\">\n  </body>\n</html>\n\n";

    close(OUTPUT);
}


sub read_cmd_line
{
    my $option_config = "";
    my $option_help = 0;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "config=s" => \$option_config,
	     "help!" => \$option_help,
	     "html-output-directory=s" => \$option_html_output_directory,
	     "outputdir=s" => \$option_output_directory,
	     "version" => \$option_version,
	    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
	my $version = version();

	print $version . "\n";

	exit 1;
    }

    # reporting options

    if ($option_help)
    {
	$0 =~ m(.*/(.*));

	my $program_name = $1;

	print
	    "

$program_name: configure, compile, check, install, tag and build
releases of packages selected from a set of packages.

regular options:
    --config                 followed by the configuration filename.
    --help                   print usage information.
    --version                give version information.
    --v|verbose              tell what is being done, specify multiple times to get more feedback.

options overwritten by te configuration file:
    --outputdir              directory where to put log files.
    --html-output-directory  directory where the html output files go.
";

	exit 1;
    }

    if ($option_config)
    {
	parse_config_file($option_config);
    }
    else
    {
	$configuration
	    = {
	       packages => {
			    $documentation_set_name => {
							upgrade => 'default action when there is no config',
						       },
			   },
	      };
    }
}


sub main
{
    read_cmd_line();

    my $output_path = $option_output_directory . "/" . $output_filename;

    rotate_logs();

    # create empty output file

    try_to("echo > $output_path", 1);

    $ENV{PATH} .= ':/bin:/usr/bin:/usr/local/bin';

    if ($configuration->{packages}->{developer}->{upgrade})
    {
	# upgrade the developer package

	try_to("neurospaces_upgrade developer", 1);
    }

    if ($configuration->{packages}->{'heterarch'}->{upgrade})
    {
	# upgrade the heterarch package

	try_to("neurospaces_upgrade heterarch", 1);

	# clean the heterarch after it has been installed

	try_to("neurospaces_clean heterarch", 1);
    }

    # loop over all the configured content packages, including self

    my $packages = $configuration->{packages};

    foreach my $package_name (keys %$packages)
    {
	#t this clearly needs additional development: the upgrade key
	#t is hardcoded for certain packages and used above for the
	#t upgrade action, and here for content generation.

	#t see also the loop below.

	if (not $packages->{$package_name}->{upgrade})
	{
	    next;
	}

	# pull and update the content itself

	try_to("neurospaces_pull '$package_name'", 1);

	try_to("neurospaces_update '$package_name'", 1);

	# clean the content after it has been installed

	try_to("neurospaces_clean '$package_name'", 1);

	#   try_to("${documentation_set_name}-check > $output_path", 1);

	# collect the descriptor check info for the email

	$descriptor_check = `'$package_name'-check 2>&1 --directory $build_directory`;

	try_to("neurospaces_website_prepare '$package_name' >>$output_path", 1);

#       try_to("make website-prepare -C $ENV{HOME}/neurospaces_project/${documentation_set_name}/source/snapshots/0/ >> $output_path", 1);

	# copy the website to its final destination

	try_to("mkdir --parents $option_html_output_directory");

	copy_html_data($package_name);

	my $html_build_directory = "$ENV{HOME}/neurospaces_project/${package_name}/source/snapshots/0/html/htdocs/neurospaces_project/${package_name}/";

	if (-d $html_build_directory)
	{
	    contents_page_generate($package_name);

	    index_page_generate($package_name);
	}
    }

    # do a link check.

    my $webcheck_path = `which webcheck`;

    if ($webcheck_path ne "")
    {
	foreach my $package_name (keys %$packages)
	{
	    #t this clearly needs additional development: the upgrade key
	    #t is hardcoded for certain packages and used above for the
	    #t upgrade action, and here for content generation.

	    #t see also the loop above.

	    if (not $packages->{$package_name}->{upgrade})
	    {
		next;
	    }

	    try_to("make webcheck -C $ENV{HOME}/neurospaces_project/${package_name}/source/snapshots/0/ >> $output_path", 1);

	    # define the build directory

	    my $html_build_directory = "$ENV{HOME}/neurospaces_project/${package_name}/source/snapshots/0/html/htdocs/neurospaces_project/${package_name}/";

	    my $html_data_directory = $option_html_output_directory . "/" . "${package_name}_data";

	    # clean the old webcheck website report

	    try_to("rm -rf $html_data_directory/webcheck");

	    # copy the new webcheck website report to its temporary / correct location

	    if (-d "$html_build_directory/webcheck")
	    {
		# \todo read the comments in copy_html_data() to understand what has happened.

		try_to("cp -af $html_build_directory/webcheck $html_data_directory/webcheck");
	    }
	}
    }

    my $text = '';

    foreach my $package_name (keys %$packages)
    {
	#t this clearly needs additional development: the upgrade key
	#t is hardcoded for certain packages and used above for the
	#t upgrade action, and here for content generation.

	#t see also the loop above.

	if (not $packages->{$package_name}->{upgrade})
	{
	    next;
	}

	$text .= produce_email_text($package_name);
    }

    try_to_mail("${documentation_set_name} cron has finished.",
		"${documentation_set_name} has finished building.\n\n" . $text);
}


# also look at the developer package cron script.

sub produce_email_text
{
    my $package_name = shift;

    my $outputfile = $option_output_directory . "/" . $output_filename;

    my $status_message = "";

    my $errorcounts = `cat $outputfile | grep 'error_count'`;

    my $revisions = `cat $outputfile | grep "base_revision_id"`;

    my $die_messages = `grep -B 15 -F '*** die:' $outputfile`;

    $status_message
	.= (
	    "$0:\nCheck for your output on the host machine here "
	    . $option_output_directory
	    . "/"
	    . $output_filename
	    . "\n"
	   );

    if (defined $configuration->{URL})
    {
	$status_message .= "Check the output over the web via this link " . $configuration->{URL} . "/\n";

	$status_message .= "The full contents is available here: " . $configuration->{URL} . "/contents.html\n";

	$status_message .= "The webcheck output may be available here: " . $configuration->{URL} . "/webcheck/\n";

	$status_message .= "The statistics output may be available here: " . $configuration->{URL} . "/../../awstats/awstats.pl\n";
    }

#     my $url = $option_html_output_directory . "/${package_name}/contents.html";

#     $status_message .= "Check the output over the web via this link " . $url . "\n";

    # add the publication report produced during the build

    use IO::File;

    my $publication_report_file = IO::File->new("</tmp/${package_name}_all_publication_results");

    if ($publication_report_file)
    {
	local $/;

	my $publication_report = <$publication_report_file>;

	$status_message .= "\n" . $publication_report . "\n";
    }
    else
    {
	$status_message .= "\nunable to read a publication report (error opening /tmp/${package_name}_all_publication_results\n\n";
    }

    if ($descriptor_check ne "")
    {
	$status_message .= "\nDescriptor file check:\n" .$descriptor_check . "\n\n";
    }

    # find all of the log files and check for error messages

    my $errors = "";

    my $logfiletext = `find $ENV{HOME}/neurospaces_project/${package_name}/source/snapshots/0 | grep output | grep \.log`;

    my @logfiles = split(/\n/, $logfiletext);

    $status_message .= "\nProcessing " . (scalar @logfiles) . " log files\n";

    my $logfile;

    foreach $logfile (@logfiles)
    {
	my $latexerrors = `cat $logfile | grep ^!`;

	$latexerrors .= `cat $logfile | grep 'LaTeX Error:'`;

	if ($latexerrors eq "")
	{
	    next;
	}
	else
	{
	    #my $filename = $logfile;
	    #$filename =~ m(.*output/(.*)\.log$);
	    my @tmp = split(/\//,$logfile);
	    my $tmp = $tmp[-1];
	    @tmp = split(/\./,$tmp);
	    my $filename = $tmp[0];

	    $status_message .= "\n\n";

	    $status_message .= "Error in document: ";

	    $status_message .= $filename;

	    $status_message .= " : \n\t";

	    $status_message .= $latexerrors;
	}
    }

    $status_message .= "\nRevisions:\n" . $revisions . "\n";
    $status_message .= "\nError Counts:\n" . $errorcounts . "\n";
    $status_message .= "\nDie Messages:\n" . $die_messages . "\n";

    $status_message
	.=
	    "\n"
		. "Your configuration:\n\n"
		    . YAML::Dump($configuration);

    return $status_message;
}


sub report_error
{
    my $command = shift;

    my $error_code = shift;

    my $message = "$0: $command returned $error_code";

    try_to_mail("${0}_cron error", $message);

#     die "$0: $command returned $error_code";
}


# rotates logs with the name '$logname'

sub rotate_logs
{
    my $output_dir = $configuration->{OUTPUTDIR};

    my $logname =  $option_output_directory . "/" . $output_filename;

    my $numlogs  = -1;

    if (not defined $configuration->{LOGROTATE})
    {
	# if not rotating logs, delete the log from the last run.

	if (-e $logname)
	{
	    system "rm -f $logname";
	}

	return;
    }
    else
    {
	$numlogs = $configuration->{LOGROTATE};
    }

    my $logdir = "";

    if (defined $configuration->{LOGDIR})
    {
	$logdir = $configuration->{LOGDIR};

	if (! -d $logdir)
	{
	    mkdir $logdir
	}

	$logdir .= "/";
    }

    # we shift all of our logs if present.
    # Whatever log happens to be the last one should
    # get overwritten with a previous log.

    my $i;

    for ($i = $numlogs - 1 ; $i > -1 ; $i--)
    {
	my $log = $logdir . $logname . '.' . $i;

	if (-e $log)
	{
	    # note that mv preserves permissions.

	    my $nextlog = $logdir . $logname . '.' . ($i + 1);

	    system "mv -f $log $nextlog";
	}
	else
	{
	    next;
	}
    }

    # after the shift, we should be able to move the
    # first log to slot 0. Now the original slot is open
    # for a log run.

    my $nextlog = $logdir . $logname . '.' . 0;

    system "mv -f $logname $nextlog";

    return;
}


sub try_to_mail
{
    my $subject = shift;
    my $message = shift;

    if (!$configuration->{MAILTO})
    {
	print "No addressee indicated in configuration\n";

	return;
    }

    my $sendto = $configuration->{MAILTO};

    my $replyto = $configuration->{MAILFROM};

    open(MAIL, "|/usr/sbin/sendmail -oi -t");

    print MAIL "From: $replyto\n";

    print MAIL "To: $sendto\n";

    print MAIL "Subject: $subject\n\n";

    print MAIL "$message\n";

    close(MAIL);
}


#
# ("command", verbosity_level)
#

sub try_to
{
    my $command = shift;

    my $no_verbose = shift;

    my $allow_fail = shift;

    if (!$no_verbose)
    {
	print "---\n";
	print "$0: trying to $command\n";
    }

    my $output_path = $option_output_directory . "/" . $output_filename;

    #! $command executed in a subshell such that redirection applies
    #! to all commands.

    system "( $command ) >>$output_path 2>&1";

    if ($?)
    {
	if ($allow_fail)
	{
	    system "echo >>$output_path 2>&1 failed with $?: $command\n";
	}
	else
	{
	    report_error($command, $?);
	}
    }
}


sub version
{
    # $Format: "    my $version=\"${package}-${label}\";"$
    my $version="developer-alpha";

    return $version;
}


main();

