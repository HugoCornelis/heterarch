#!/usr/bin/perl -w
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use Getopt::Long;

use Neurospaces::Documentation;

use YAML;


$0 =~ m(.*/(.*));

my $program_name = $1;

$program_name =~ m((.*)[_-](.*));

my $documentation_set_name = $1;
my $root_operation_name = $2;


$SIG{__DIE__}
    = sub {

	use Carp;

	confess @_;

	exit 1;
    };


$SIG{INT}
    = sub {
	use Carp;

	confess @_;

	exit 1;
    };


my $option_documents = [];
my $option_dry_run;
my $option_input_type = 'latexml';
my $option_namespace_prefixing = 1;
my $option_output_types = [];
my $option_parse_only = 0;
my $option_regex = ".*";
my $option_selectors = [];
my $option_tags = [];
my $option_verbose;

our $option_set_name = $documentation_set_name || "userdocs";


sub main
{
    read_cmd_line();

    # switch to the build directory

    my $build_directory = Neurospaces::Documentation::build_directory();

    if (!chdir $build_directory)
    {
	die "$0: cannot change to the build directory ($build_directory)";
    }

#     if ($option_dry_run)
#     {
# 	print Dump( { all_documents => $documents, }, );
#     }
#     else
    {
	# loop over all documents to query

# 	if (!scalar keys %$documents)
# 	{
# 	    print "$0: no documents to query\n";
# 	}

	foreach my $output_type (@$option_output_types)
	{
	    my $stop;

	    if ($output_type eq 'xml')
	    {
		print "<heterarch-query>\n";
	    }

	    foreach my $document_name (sort @$option_documents)
	    {
		$document_name =~ s(/$)();

		$document_name =~ s(.*/)();

		chomp $document_name;

		if ($document_name !~ m/$option_regex/)
		{
		    next;
		}

		my $document
		    = Neurospaces::Documentation::Document->new
			(
			 {
			  name => $document_name,
			 },
			);

		# execute the operation

		my $result
		    = $document->select
			(
			 {
			  input_type => $option_input_type,
			  namespace_prefixing => $option_namespace_prefixing,
			  output_type => $output_type,
			  selectors => $option_selectors,
			  set_name => $option_set_name,
			  verbose => $option_verbose,
			 },
			);

		if (not ref $result)
		{
		    print $result;
		}
		else
		{
		    my $error = $$result;

		    if ($error)
		    {
			print "$0: *** Error: for document $document_name: selection failed ($error)\n";

			$stop = "$document_name: $error";

			last;
		    }
		}
	    }

	    if ($stop)
	    {
		last;
	    }
	    else
	    {
		if ($output_type eq 'xml')
		{
		    print "</ heterarch-query>\n";
		}
	    }
	}
    }
}


sub read_cmd_line
{
    my $option_help = 0;
    my $option_version;

    # switch to the build directory

    my $build_directory = Neurospaces::Documentation::project_directory();

    if (!chdir $build_directory)
    {
	die "$0: cannot change to the build directory ($build_directory)";
    }

    # read project configuration

    my $project_descriptor;

    eval
    {
	$project_descriptor = YAML::LoadFile("$build_directory/project-descriptor.yml");
    };

#     # add the project compiler options

#     if (defined $project_descriptor)
#     {
# 	unshift @ARGV, @{$project_descriptor->{'document-build'}->{options}};
#     }

    # parse the resulting command line

    my $result
	= GetOptions
	    (
	     "documents=s" => $option_documents,
	     "dry-run!" => \$option_dry_run,
	     "input-type=s" => \$option_input_type,
	     "namespace-prefixing!" => \$option_namespace_prefixing,
	     "help!" => \$option_help,
	     "output-type=s" => $option_output_types,
	     "parse-only!" => \$option_parse_only,
	     "regex=s" => \$option_regex,
	     "selectors=s" => $option_selectors,
	     "set-name=s" => \$option_set_name,
	     "tags=s" => $option_tags,
	     "verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
    }

    # reporting options

    if ($option_help)
    {
	print
	    "

$program_name: select atoms from a publication.  The first argument on
the command line is a document name that was previously built
(currently must be xml).  The following arguments are selectors
(currently xpath).

synopsis:
    $0 --document <document name 1> ... --selector <selector 1> ...

options:
    --documents            documents to query, use multiple times to specify multiple documents.
    --dry-run              print what documents would be queriedwithout actually building them.
    --input-type           type of input (latexml (default) or html).
    --namespace-prefixing  enable automated xml namespace prefixing for use with the default xml namespace.
                           note: by default turned on, use --no-namespace-prefixing to turn this off.
    --help                 print usage information.
    --output-type          select the type of output, may be given multiple times (xml, text).
    --parse-only           only execute parse commands, without actually querying documentation.
    --regex                selects documents by regex (default regex is all).
    --selectors            selectors to use for the query.
    --set-name             select a document set (builtin default is userdocs).
    --tags                 process the documents with these tags, multiple tags options may be given.
    --version              give version information.
    --v|verbose            tell what is being done, specify multiple times to get more feedback.

example usage:
    $0 $option_set_name-homepage /document/section/title

";

	exit 0;
    }

    # get all documents from the command line

    if (scalar @$option_tags)
    {
	my $documents
	    = Neurospaces::Documentation::find_documentation
		(
		 {
		  # 	      names => [ @$option_documents, ],
		  tags => $option_tags,
		 },
		);

	if ($option_verbose)
	{
	    print Dump( { published => $documents, }, );
	}

	$option_documents = [ @$option_documents, keys %$documents, ];
    }

    # if there are documents to be queried and no selectors determined yet

    if (scalar @ARGV > 0
	and (scalar @$option_documents > 0))
    {
	# we take the rest of the arguments as selectors

	$option_selectors = [ @ARGV, ];

	@ARGV = ();
    }

    if ($option_verbose)
    {
	print Dump(
		   {
		    documents => $option_documents,
		    selectors => $option_selectors,
		    arguments => [ @ARGV, ],
		   },
		  );
    }

    # if there are no arguments left

    if (scalar @ARGV <= 1

	# and no document or selector options have been found

	and (scalar @$option_documents == 0
	     or scalar @$option_selectors == 0))
    {
	# that is an error

	die "$0: *** Error: Error in option processing: no documents given or no selectors given";
    }

    if (scalar @ARGV > 1)
    {
	$option_documents = [ shift @ARGV, ];

	$option_selectors = [ @ARGV, ];
    }

    if ($option_verbose)
    {
	print Dump(
		   {
		    'Documents to query' => $option_documents,
		    'Selectors' => $option_selectors,
		   },
		  );
    }

    if (not scalar @$option_output_types)
    {
	$option_output_types = [ 'xml', ];
    }
}


main();


